name: Deploy to Ubuntu Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create production environment file from secrets
      run: |
        cat > docker/prod/.env << EOF
        # ===========================================
        # PRODUCTION ENVIRONMENT CONFIGURATION
        # ===========================================

        # Server Configuration
        HOST=0.0.0.0
        PORT=8080
        NODE_ENV=production

        # Security - CHANGE THESE TO STRONG SECRETS!
        # Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
        AUTH_TOKEN=${{ secrets.AUTH_TOKEN }}
        HEX_ENCRYPTION_KEY=${{ secrets.HEX_ENCRYPTION_KEY }}

        # Domain Configuration
        DOMAIN=${{ secrets.DOMAIN }}
        SSL_EMAIL=${{ secrets.SSL_EMAIL }}

        # CORS Configuration
        ALLOWED_ORIGINS=*

        # MongoDB Configuration - Production without auth
        MONGODB_URI=mongodb://mongo:27017/proxy
        MONGO_URI=mongodb://mongo:27017/proxy
        MONGO_MAX_POOL_SIZE=20
        MONGO_SERVER_SELECTION_TIMEOUT=5000
        MONGO_SOCKET_TIMEOUT=45000
        MONGO_OPTIONS_STRING=retryWrites=true&w=majority

        # Redis Configuration - Production without auth
        REDIS_HOST=redis
        REDIS_PORT=6379
        REDIS_URL=redis://redis:6379
        REDIS_DB=0
        REDIS_MAX_RETRIES=3

        # Proxy Configuration
        PROXY_TIMEOUT=30000
        MAX_REQUEST_SIZE=10mb
        COMPRESSION_ENABLED=true

        # Metrics Configuration
        METRICS_ENABLED=true
        METRICS_RETENTION_DAYS=30

        # WebSocket Configuration
        WS_MAX_COMPRESSED_SIZE=65536
        WS_MAX_BACKPRESSURE=65536
        WS_PING_INTERVAL=30000

        # Logging Configuration
        LOG_LEVEL=info
        LOG_FORMAT=json
        FORCE_CONSOLE_OUTPUT=false

        # Performance Configuration
        MAX_CONCURRENT_REQUESTS=2000
        REQUEST_RATE_LIMIT=200
        DEVICE_CACHE_TTL=7200

        # Security Headers & Rate Limiting
        CORS_ORIGINS=https://${{ secrets.DOMAIN }}
        RATE_LIMIT_WINDOW=900000
        RATE_LIMIT_MAX_REQUESTS=200
        MAX_CONNECTIONS=2000

        # Production Configuration
        DEBUG_MODE=false
        MOCK_RESPONSES=false
        SIMULATE_LATENCY=0

        # SSL Configuration
        SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
        SSL_KEY_PATH=/etc/nginx/ssl/key.pem
        EOF
        
    - name: Copy production environment file to server
      run: |
        scp docker/prod/.env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }}:~/apps/Proxy/docker/prod/.env
        
    - name: Setup SSL certificates from secrets
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd apps/Proxy/docker/prod/nginx/ssl
          
          # Create SSL certificate files from GitHub secrets
          echo "Setting up SSL certificates from GitHub secrets..."
          
          # Create cert.pem from secret
          cat > cert-original.pem << 'CERT_EOF'
        ${{ secrets.SSL_CERT }}
        CERT_EOF
          
          # Create ca.crt from secret
          cat > ca.crt << 'CA_EOF'  
        ${{ secrets.SSL_CA_BUNDLE }}
        CA_EOF
          
          # Create key.pem from secret
          cat > key.pem << 'KEY_EOF'
        ${{ secrets.SSL_KEY }}
        KEY_EOF
          
          # Create full certificate chain (domain cert + CA bundle)
          cat cert-original.pem ca.crt > cert.pem
          
          # Also create fullchain.pem for clarity (same content as cert.pem)
          cp cert.pem fullchain.pem
          
          # Set proper permissions
          chmod 644 cert.pem
          chmod 644 fullchain.pem
          chmod 600 key.pem
          chmod 644 ca.crt
          chmod 644 cert-original.pem
          
          echo "SSL certificates configured successfully"
        EOF
        
    - name: Deploy to production server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Navigate to the apps directory
          cd apps/Proxy
          
          # Pull latest changes
          git pull origin main
          
          # Clear all caches and force clean build
          echo "Clearing all caches and preparing clean build..."
          
          # Stop existing containers first
          cd docker
          make prod-stop || true
          
          # Clear Docker caches and unused images
          echo "Cleaning Docker caches..."
          make clean-docker-cache || true
          
          # Remove all containers and images related to this project
          echo "Removing project containers and images..."
          docker-compose -f prod/docker-compose.yml down --rmi all --volumes --remove-orphans || true
          
          # Clear Node.js caches in source directory
          echo "Clearing Node.js caches..."
          cd ..
          rm -rf node_modules || true
          rm -rf package-lock.json || true
          rm -rf yarn.lock || true
          rm -rf ~/.npm/_cacache || true
          npm cache clean --force || true
          
          # Clear application logs and temp files
          echo "Clearing application files..."
          rm -rf logs/* || true
          rm -rf tmp/* || true
          rm -rf .next || true
          rm -rf dist || true
          rm -rf build || true
          rm -rf src/node_modules || true
          rm -rf src/package-lock.json || true
          
          # Clear any Docker build context cache
          echo "Clearing Docker build context..."
          cd docker
          rm -rf .dockerignore.bak || true
          
          # Force rebuild with no cache using BuildKit
          echo "Starting clean production build with no cache..."
          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain
          make prod-build-no-cache
          
          # Start the production application
          make prod-start
        EOF
        
    - name: Verify production deployment
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd apps/Proxy/docker
          echo "Waiting for production services to start..."
          sleep 30
          make prod-status
        EOF
