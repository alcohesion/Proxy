services:
  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/templates/default.conf.template:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep nginx | grep -v grep"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main application
  app:
    build:
      context: ../..
      dockerfile: docker/Dockerfile
    expose:
      - "8080"
    env_file:
      - .env
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app-logs:/app/logs
      - ../init.sh:/app/init.sh:ro
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # MongoDB service
  mongo:
    image: mongo:8.0.11
    expose:
      - "27017"
    environment:
      - MONGO_INITDB_DATABASE=proxy
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - mongo-logs:/data/logs
    networks:
      - proxy-network
    restart: unless-stopped
    command: mongod --dbpath /data/db --logpath /dev/stdout --bind_ip 0.0.0.0 --port 27017 --auth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis service
  redis:
    image: redis:7.2-alpine
    expose:
      - "6379"
    volumes:
      - redis-data:/data
      - ../redis.conf:/etc/redis/redis.conf:ro
    networks:
      - proxy-network
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  mongo-logs:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local

networks:
  proxy-network:
    driver: bridge
